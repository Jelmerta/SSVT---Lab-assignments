module Exercise7 where

import Data.Char (digitToInt, isDigit, ord)
import Data.Digits (unDigits) -- This requires library Data.Digits (this can be installed using stack install digits)
import Data.String

-- Checks if an IBAN number is correct by the rules of https://en.wikipedia.org/wiki/International_Bank_Account_Number.
iban :: String -> Bool
iban code = toInteger (length code) == ibanCountryLength (ibanCountry code) && 1 == ibanComputeRemainder (integerListToString (ibanConvertToInteger (ibanRearrange code)))

-- Gives the country code of an IBAN number.
ibanCountry :: String -> String
ibanCountry = take 2

-- Rotate a list n steps.
-- https://stackoverflow.com/questions/16378773/rotate-a-list-in-haskell
rotate :: Int -> [a] -> [a]
rotate _ [] = []
rotate n xs = zipWith const (drop n (cycle xs)) xs

-- Move the four initial characters to the end of the string.
ibanRearrange :: String -> String
ibanRearrange = rotate 4

-- Convert a character to the number specified by the IBAN specifications.
charToInteger :: Char -> Integer
charToInteger letter = if isDigit letter then toInteger (digitToInt letter) else toInteger (ord letter - 55)

-- Replace each letter in the string with two digits, thereby expanding the string, where A = 10, B = 11, ..., Z = 35.
ibanConvertToInteger :: [Char] -> [Integer]
ibanConvertToInteger = map charToInteger 

-- Convert list of integers to a string.
integerListToString :: [Integer] -> String
integerListToString = concatMap show

-- Interpret the string as a decimal integer and compute the remainder of that number on division by 97.
ibanComputeRemainder :: String -> Integer
ibanComputeRemainder code = read code `mod` 97

exercise7 :: IO ()
exercise7 = do
    putStrLn "--- Exercise 7: Implementing and testing IBAN validation ---"

    putStrLn "The inital plan was to test the IBAN validator by generating \
    \random correct and incorrect IBAN numbers by running the IBAN validator \
    \in reverse. But later we came to the conclustion that this would not \
    \correctly test the validator implementation because the test data would \
    \be generated by the implementation itself. Therefore sources like \
    \iban.com have been consulted to find correct and incorrect \
    \IBAN numbers as valid test data."
    putStrLn "Validate IBAN from example of\nhttps://en.wikipedia.org\
    \/wiki/International_Bank_Account_Number#Validating_the_IBAN\n\
    \(this should be true)"
    print $ iban "GB82WEST12345698765432"
    putStrLn "Validate 10 randomly picked IBAN codes from \
    \https://www.iban.com/structure (these 10 should all be true)"
    print $ iban "AL35202111090000000001234567"
    print $ iban "BE71096123456769"
    print $ iban "BR1500000000000010932840814P2"
    print $ iban "DO22ACAU00000000000123456789"
    print $ iban "EE471000001020145685"
    print $ iban "GE60NB0000000123456789"
    print $ iban "HU93116000060000000012345676"
    print $ iban "JO71CBJO0000000000001234567890"
    print $ iban "MU43BOMM0101123456789101000MUR"
    print $ iban "NL02ABNA0123456789"
    putStrLn "Validate 4 incorrect IBAN codes from \
    \https://nl.iban.com/testibans (these tree should be false)"
    print $ iban "GB94BARC20201530093459"
    print $ iban "GB96BARC202015300934591"
    print $ iban "GB02BARC2020153009345"
    print $ iban "US64SVBKUS6S3300958879"
