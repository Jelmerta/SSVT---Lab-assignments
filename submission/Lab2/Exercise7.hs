module Exercise7 where

import Data.Char (digitToInt, isDigit, ord)
import Data.Digits (unDigits)
import Data.String

-- Checks if an IBAN number is correct by the rules of https://en.wikipedia.org/wiki/International_Bank_Account_Number.
iban :: String -> Bool
iban code = toInteger (length code) == ibanCountryLength (ibanCountry code) && 1 == ibanComputeRemainder (integerListToString (ibanConvertToInteger (ibanRearrange code)))

-- Gives the country code of an IBAN number.
ibanCountry :: String -> String
ibanCountry = take 2

-- Rotate a list n steps.
-- https://stackoverflow.com/questions/16378773/rotate-a-list-in-haskell
rotate :: Int -> [a] -> [a]
rotate _ [] = []
rotate n xs = zipWith const (drop n (cycle xs)) xs

-- Move the four initial characters to the end of the string.
ibanRearrange :: String -> String
ibanRearrange = rotate 4

-- Convert a character to the number specified by the IBAN specifications.
charToInteger :: Char -> Integer
charToInteger letter = if isDigit letter then toInteger (digitToInt letter) else toInteger (ord letter - 55)

-- Replace each letter in the string with two digits, thereby expanding the string, where A = 10, B = 11, ..., Z = 35.
ibanConvertToInteger :: [Char] -> [Integer]
ibanConvertToInteger = map charToInteger 

-- Convert list of integers to a string.
integerListToString :: [Integer] -> String
integerListToString = concatMap show

-- Interpret the string as a decimal integer and compute the remainder of that number on division by 97.
ibanComputeRemainder :: String -> Integer
ibanComputeRemainder code = read code `mod` 97

-- Gives the length of a country's IBAN number.
-- Data from: https://nl.iban.com/structuur
ibanCountryLength :: String -> Integer
ibanCountryLength country
   | country == "AL" = 28
   | country == "AD" = 24
   | country == "AZ" = 28
   | country == "BH" = 22
   | country == "BE" = 16
   | country == "BA" = 20
   | country == "BR" = 29
   | country == "BG" = 22
   | country == "CR" = 22
   | country == "HR" = 21
   | country == "CY" = 28
   | country == "DK" = 18
   | country == "DO" = 28
   | country == "DE" = 22
   | country == "EG" = 29
   | country == "SV" = 28
   | country == "EE" = 20
   | country == "FO" = 18
   | country == "FI" = 18
   | country == "FR" = 27
   | country == "GE" = 22
   | country == "GI" = 23
   | country == "GR" = 27
   | country == "GL" = 18
   | country == "GT" = 28
   | country == "HU" = 28
   | country == "IE" = 22
   | country == "IS" = 26
   | country == "IQ" = 23
   | country == "IL" = 23
   | country == "IT" = 27
   | country == "JO" = 30
   | country == "KZ" = 20
   | country == "XK" = 20
   | country == "KW" = 30
   | country == "LV" = 21
   | country == "LB" = 28
   | country == "LI" = 21
   | country == "LT" = 20
   | country == "LU" = 20
   | country == "VG" = 24
   | country == "MK" = 19
   | country == "MT" = 31
   | country == "MR" = 27
   | country == "MU" = 30
   | country == "MD" = 24
   | country == "MC" = 27
   | country == "ME" = 22
   | country == "NL" = 18
   | country == "NO" = 15
   | country == "AT" = 20
   | country == "PK" = 24
   | country == "PS" = 29
   | country == "PL" = 28
   | country == "PT" = 25
   | country == "QA" = 29
   | country == "RO" = 24
   | country == "LC" = 32
   | country == "SM" = 27
   | country == "ST" = 25
   | country == "SA" = 24
   | country == "RS" = 22
   | country == "SC" = 31
   | country == "SI" = 19
   | country == "SK" = 24
   | country == "ES" = 24
   | country == "TL" = 23
   | country == "CZ" = 24
   | country == "TN" = 24
   | country == "TR" = 26
   | country == "UA" = 29
   | country == "GB" = 22
   | country == "AE" = 23
   | country == "BY" = 28
   | country == "SE" = 24
   | country == "CH" = 21
   | otherwise = -1

exercise7 :: IO ()
exercise7 = do
    putStrLn "--- Exercise 7: Implementing and testing IBAN validation ---"

    putStrLn "The inital plan was to test the IBAN validator by generating \
    \random correct and incorrect IBAN numbers by running the IBAN validator \
    \in reverse. But later we came to the conclustion that this would not \
    \correctly test the validator implementation because the test data would \
    \be generated by the implementation itself. Therefore sources like \
    \iban.com have been consulted to find correct and incorrect \
    \IBAN numbers as valid test data."
    putStrLn "Validate IBAN from example of\nhttps://en.wikipedia.org\
    \/wiki/International_Bank_Account_Number#Validating_the_IBAN\n\
    \(this should be true)"
    print $ iban "GB82WEST12345698765432"
    putStrLn "Validate 10 randomly picked IBAN codes from \
    \https://www.iban.com/structure (these 10 should all be true)"
    print $ iban "AL35202111090000000001234567"
    print $ iban "BE71096123456769"
    print $ iban "BR1500000000000010932840814P2"
    print $ iban "DO22ACAU00000000000123456789"
    print $ iban "EE471000001020145685"
    print $ iban "GE60NB0000000123456789"
    print $ iban "HU93116000060000000012345676"
    print $ iban "JO71CBJO0000000000001234567890"
    print $ iban "MU43BOMM0101123456789101000MUR"
    print $ iban "NL02ABNA0123456789"
    putStrLn "Validate 4 incorrect IBAN codes from \
    \https://nl.iban.com/testibans (these tree should be false)"
    print $ iban "GB94BARC20201530093459"
    print $ iban "GB96BARC202015300934591"
    print $ iban "GB02BARC2020153009345"
    print $ iban "US64SVBKUS6S3300958879"
